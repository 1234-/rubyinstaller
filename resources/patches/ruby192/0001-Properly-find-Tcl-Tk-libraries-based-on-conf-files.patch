From 03ec3f0e0009217cbf556b5c440a7be8aa707212 Mon Sep 17 00:00:00 2001
From: Bosko Ivanisevic <bosko.ivanisevic@gmail.com>
Date: Sat, 14 May 2011 16:25:20 +0200
Subject: [PATCH] Properly find Tcl/Tk libraries based on conf files

---
 ext/tk/extconf.rb |   39 +++++++++++++++++++++++++++++----------
 1 files changed, 29 insertions(+), 10 deletions(-)

diff --git a/ext/tk/extconf.rb b/ext/tk/extconf.rb
index 388d6fc..b8400c0 100644
--- a/ext/tk/extconf.rb
+++ b/ext/tk/extconf.rb
@@ -511,7 +511,7 @@ def get_tclConfig_dirs
   config_dir
 end
 
-def libcheck_for_tclConfig(dir, tclconf, tkconf)
+def libcheck_for_tclConfig(tcldir, tkdir, tclconf, tkconf)
   tcllib_ok = tklib_ok = false
 
   if TkLib_Config["tcltk-stubs"]
@@ -528,21 +528,21 @@ def libcheck_for_tclConfig(dir, tclconf, tkconf)
   tcllibs = nil
 
   begin
-    tcllib_ok ||= Dir.glob(File.join(dir, "*tcl#{stub}#{tclconf['TCL_MAJOR_VERSION']}{.,}#{tclconf['TCL_MINOR_VERSION']}*.*"), File::FNM_CASEFOLD).find{|file|
-      if file =~ /^.*(tcl#{stub}#{tclconf['TCL_MAJOR_VERSION']}(\.|)#{tclconf['TCL_MINOR_VERSION']}.*)\.[^.]*$/
+    tcllib_ok ||= Dir.glob(File.join(tcldir, "*tcl#{stub}#{tclconf['TCL_MAJOR_VERSION']}{.,}#{tclconf['TCL_MINOR_VERSION']}*.*"), File::FNM_CASEFOLD).find{|file|
+      if file.match /^.*(tcl#{stub}#{tclconf['TCL_MAJOR_VERSION']}(\.|)#{tclconf['TCL_MINOR_VERSION']}.*)\.[^.]*$/
         #puts "check #{file} #{$1} #{tclfunc} #{dir}"
         #find_library($1, tclfunc, dir)
         tcllibs = append_library($libs, $1)
-        $LIBPATH = libpath | [dir]
+        $LIBPATH = libpath | [tcldir]
         try_func(tclfunc, tcllibs)
       end
     }
-    tklib_ok ||= Dir.glob(File.join(dir, "*tk#{stub}#{tkconf['TK_MAJOR_VERSION']}{.,}#{tkconf['TK_MINOR_VERSION']}*.*"), File::FNM_CASEFOLD).find{|file|
-      if file =~ /^.*(tk#{stub}#{tkconf['TK_MAJOR_VERSION']}(\.|)#{tkconf['TK_MINOR_VERSION']}.*)\.[^.]*$/
+    tklib_ok ||= Dir.glob(File.join(tkdir, "*tk#{stub}#{tkconf['TK_MAJOR_VERSION']}{.,}#{tkconf['TK_MINOR_VERSION']}*.*"), File::FNM_CASEFOLD).find{|file|
+      if file.match /^.*(tk#{stub}#{tkconf['TK_MAJOR_VERSION']}(\.|)#{tkconf['TK_MINOR_VERSION']}.*)\.[^.]*$/
         #puts "check #{file} #{$1} #{tkfunc} #{dir}"
         # find_library($1, tkfunc, dir)
         tklibs = append_library(tcllibs, $1)
-        $LIBPATH = libpath | [dir]
+        $LIBPATH = libpath | [tkdir]
         try_func(tkfunc, tklibs)
       end
     }
@@ -578,9 +578,18 @@ def search_tclConfig(*paths) # libdir list or [tcl-libdir|file, tk-libdir|file]
   config_dir.uniq!
   config_dir.map{|dir|
     if dir.kind_of? Array
-      [dir[0].strip.chomp('/'), dir[1].strip.chomp('/')]
+      if File::ALT_SEPARATOR
+        [dir[0].gsub(File::ALT_SEPARATOR, File::SEPARATOR).strip.chomp('/'),
+          dir[1].gsub(File::ALT_SEPARATOR, File::SEPARATOR).strip.chomp('/')]
+      else
+        [dir[0].strip.chomp('/'), dir[1].strip.chomp('/')]
+      end
     else
-      dir.strip.chomp('/')
+      if File::ALT_SEPARATOR
+        dir.gsub(File::ALT_SEPARATOR, File::SEPARATOR).strip.chomp('/')
+      else
+        dir.strip.chomp('/')
+      end
     end
   }.each{|dir|
     print(".") # progress
@@ -629,7 +638,7 @@ def search_tclConfig(*paths) # libdir list or [tcl-libdir|file, tk-libdir|file]
         # if use framework, not check (believe it is installed properly)
         tcllib_ok = tklib_ok = true
       else
-        tcllib_ok, tklib_ok = libcheck_for_tclConfig(File.dirname(tclpath),
+        tcllib_ok, tklib_ok = libcheck_for_tclConfig(File.dirname(tclpath), File.dirname(tkpath),
                                                       tclconf, tkconf)
 =begin
         tcllib_ok = tklib_ok = false
@@ -929,6 +938,7 @@ def find_tcl(tcllib, stubs, version, *opt_paths)
       [path, find_library(tcllib, func, path)]
     else
       st = search_vers_on_path(versions, path, lib, 'tcl').find{|ver|
+        ((print(".");find_library(TclConfig_Info['TCL_LIB_FLAG'].sub('-l', ''), func, path)) if TclConfig_Info['TCL_LIB_FLAG']) or
         (print(".");find_library("#{lib}#{ver}", func, path)) or
           (print(".");find_library("#{lib}#{ver.delete('.')}", func, path)) or
           (print(".");find_library("#{lib}#{ver}g", func, path)) or
@@ -1040,6 +1050,7 @@ def find_tk(tklib, stubs, version, *opt_paths)
       [path, find_library(tklib, func, path)]
     else
       st = search_vers_on_path(versions, path, lib, 'tk').find{|ver|
+        ((print(".");find_library(TkConfig_Info['TK_LIB_FLAG'].sub('-l', ''), func, path)) if TkConfig_Info['TK_LIB_FLAG']) or
         (print(".");find_library("#{lib}#{ver}", func, path)) or
           (print(".");find_library("#{lib}#{ver.delete('.')}", func, path)) or
           (print(".");find_library("#{lib}#{ver}g", func, path)) or
@@ -1430,6 +1441,14 @@ unless is_win32?
   print(".") # progress
   have_library("m", "log", "math.h")
   print("\n") # progress
+else
+  have_library("gdi32", "SelectPalette")
+  have_library("comctl32")
+  have_library("imm32", "ImmGetContext")
+  have_library("ole32", "GetRunningObjectTable")
+  have_library("oleaut32", "VariantInit")
+  have_library("uuid")
+  have_library("comdlg32", "GetOpenFileName")
 end
 $CPPFLAGS += ' -D_WIN32' if /cygwin/ =~ RUBY_PLATFORM
 
-- 
1.7.4.msysgit.0

